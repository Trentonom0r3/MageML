#pragma once
#include "FilterBase.hpp"
#include <string>
#include <vector>
#include <map>
#include <utility>

class Cellauto : public FilterBase {
public:
    /**
     * Create pattern generated by an elementary cellular automaton.
     */
    /**
     * read initial pattern from file
     * Aliases: f
     * Type: String
     * Required: Yes
     * Default: No Default
     */
    void setFilename(const std::string& value);
    std::string getFilename() const;

    /**
     * set initial pattern
     * Aliases: p
     * Type: String
     * Required: Yes
     * Default: No Default
     */
    void setPattern(const std::string& value);
    std::string getPattern() const;

    /**
     * set video rate
     * Aliases: r
     * Type: Video Rate
     * Required: No
     * Default: 40439.8
     */
    void setRate(const std::pair<int, int>& value);
    std::pair<int, int> getRate() const;

    /**
     * set video size
     * Aliases: s
     * Type: Image Size
     * Required: Yes
     * Default: No Default
     */
    void setSize(const std::pair<int, int>& value);
    std::pair<int, int> getSize() const;

    /**
     * set rule
     * Type: Integer
     * Required: No
     * Default: 110
     */
    void setRule(int value);
    int getRule() const;

    /**
     * set fill ratio for filling initial grid randomly
     * Aliases: ratio
     * Type: Double
     * Required: No
     * Default: 0.62
     */
    void setRandom_fill_ratio(double value);
    double getRandom_fill_ratio() const;

    /**
     * set the seed for filling the initial grid randomly
     * Aliases: seed
     * Type: Integer64
     * Required: No
     * Default: -1
     */
    void setRandom_seed(int64_t value);
    int64_t getRandom_seed() const;

    /**
     * scroll pattern downward
     * Type: Boolean
     * Required: No
     * Default: true
     */
    void setScroll(bool value);
    bool getScroll() const;

    /**
     * start filling the whole video
     * Type: Boolean
     * Required: No
     * Default: false
     */
    void setStart_full(bool value);
    bool getStart_full() const;

    /**
     * start filling the whole video
     * Type: Boolean
     * Required: No
     * Default: true
     */
    void setFull(bool value);
    bool getFull() const;

    /**
     * stitch boundaries
     * Type: Boolean
     * Required: No
     * Default: true
     */
    void setStitch(bool value);
    bool getStitch() const;

    Cellauto(const std::string& filename = "", const std::string& pattern = "", std::pair<int, int> rate = std::make_pair<int, int>(0, 1), std::pair<int, int> size = std::make_pair<int, int>(0, 1), int rule = 110, double random_fill_ratio = 0.62, int64_t random_seed = 0, bool scroll = true, bool start_full = false, bool full = true, bool stitch = true);
    virtual ~Cellauto();

    std::string getFilterDescription() const override;

private:
    // Option variables
    std::string filename_;
    std::string pattern_;
    std::pair<int, int> rate_;
    std::pair<int, int> size_;
    int rule_;
    double random_fill_ratio_;
    int64_t random_seed_;
    bool scroll_;
    bool start_full_;
    bool full_;
    bool stitch_;
};
